CREATE TABLE public.hero
(
    hero_name VARCHAR(300) NOT NULL,
    hero_password BIGINT NOT NULL,
    hero_type BIGINT DEFAULT 0 NOT NULL,
    create_time TIMESTAMP DEFAULT now(),
    hero_lv INTEGER DEFAULT 0 NOT NULL,
    update_time TIMESTAMP DEFAULT now() NOT NULL,
    hero_price NUMERIC DEFAULT 0 NOT NULL,
    img_path VARCHAR(300),
    video_path VARCHAR(300)
);
CREATE UNIQUE INDEX hero_hero_name_uindex ON public.hero (hero_name);

create or replace function upd_timestamp() returns trigger as
$$
begin
  new.update_time = current_timestamp;
  return new;
end
$$
language plpgsql;

create trigger update_time before update on hero for each row execute procedure upd_timestamp();








订单

create table BuyerOrder
(
  order_id     varchar(300)                                      not null,
  buyer_name    varchar(300)                                      not null,
  buyer_phone        varchar(255),
  buyer_address      varchar(255),
  hero_id  varchar(255)          not null,
  order_amount   numeric              not null,
  order_status    bigint        default  0                    not null,
  pay_status      bigint default 0,
  create_time    varchar(250) default CURRENT_TIMESTAMP,
  update_time varchar(250) default CURRENT_TIMESTAMP,
  order_detail_id varchar(50)
);

create unique index buyer_name_uindex
  on BuyerOrder (buyer_name);
create unique index order_id_uindex
  on BuyerOrder (order_id);

create trigger update_time
  before update
  on BuyerOrder
  for each row
execute procedure upd_timestamp();


订单明细
create table order_detail
(
  detail_id     varchar(255)                                      not null,
  order_id    varchar(255)                                         not null,
  product_id        varchar(255),
  product_name      varchar(255),
  product_price  numeric         not null,
  product_quantity      bigint    default 0      ,
  product_icon    bigint
);


1.后台类目表

gx_back_category  //后台类目表

(
  back_category_id     varchar(255)                                      not null,     // 类目id
  back_category_parend_id    varchar(255)                                         not null, // 类目
  back_category_name     varchar(255), //类目名称
  product_name      varchar(255),
  product_price  numeric         not null,
  product_quantity      bigint    default 0      ,
  product_icon    bigint
);

2. 模板表(设备，仪器，试剂，耗材)
   1、  模板表，需要和商品类目关联

3.   规格参数数据表

  2、  规格参数数据表，需要和试剂和耗材关联

在数据库中规格参数模板和具体的规格参数数据都是以json格式的字符串保存，而不是分字段保存

4.库存表同